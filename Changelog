DrIFT-2.1.0:
 * added 'get' utility which creates foo_g for each label which returns its
   value in a failing monad rather than raising an error.
 * added 'from' utility which creates fromFoo for each constructors
 * no longer an error for DERIVEPATH to not be set
 * added -i to ignore directives in file. useful with -g and -r for testing
 * added 'Query' which creates from, get, has, and is functions, but in a
   class with an instance for the data type. useful for extensible data types
 * added deriving rule for 'Monoid'
 * added code subdirectory with support code

DrIFT-2.0.4:
 * added rule for GhcBinary
 * now allows record syntax with newtype

DrIFT-2.0.3:
 * 'update' functions now pass through values without the specified field
 * drift-ghc script added to be used with ghc by passing -pgmF drift-ghc -F 
 * documentation updated.

DrIFT-2.0.2:
 * deriving 'update' works with newer versions of ghc
 * fixed bug in Show and Read instances 

DrIFT-2.0.1:
 * fixed many warnings in generated code
 * support for strict fields in constructors
 * support for infix constructors

DrIFT-2.0rc4:
 * added help messages and categorization to rules
 * small isLiterate fix (TODO use nhcs deliterizer)
 * prints debug info in comment in chaseImports
 * code cleanups
 * integrated some changes from Strafunski 1.7
 * autoconf/automake improvements

DrIFT-2.0rc3:
 * fixed version strings in generated files
 * fix dependency generation
 * fixed example test cases

DrIFT-2.0rc2:
 * autoconf/automake added
 * texinfo is installed properly now
 * build system cleanups
 * works with both nhc and ghc again

DrIFT-2.0rc1: 
 * new texinfo documentation, based on Noel's original manual.
 * new option '-r' to only emit results and not original source
 * new option '-g' to add new global rules to apply.
 * cleaned up old non haskell98-compliant hacks

jDrIFT-1:
 * proper GetOpt command line handling, allows you to specify an 
   output file (-o) as well as list all possible derivations this 
   version was compiled with (-l)
 * proper LINE pragmas in generated code
 * smarter error handling in some cases, parser smarter sometimes.
 * can deal with/ignore as appropriate some ghc extensions now
 * rules to derive Typeable used by the Dynamic library.
 * rules to derive Observable from the HOOD object debugger
 * rules to derive Term, a generic term representation for generic
   computation, can be used in a similar fashion to the Strafunski one,
   but has a number of advantages, fully lazy constant time implode/explode
   being the main one. (the external library is compatable with their work.)


